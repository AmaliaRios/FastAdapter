# Thanks to https://github.com/coil-kt/coil/blob/master/.github/workflows/ci.yml
name: CI

on:
  workflow_dispatch:
    inputs:
      passphrase:
        description: 'Passphrase required for secrets'
        required: true
      version:
        description: 'Version to build'
        required: true
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 100

      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Checkout Gradle Build Cache
        if: ${{ steps.self_hosted.outputs.FLAG != 'self-hosted' }}
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/wrapper/dists/**/gradle*.zip
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Build Debug
        run: ./gradlew clean app:assembleDebug

      - name: Run Lint
        if: github.event_name  == 'pull_request'
        run: ./gradlew lintDebug

      - name: Detekt
        if: github.event_name  == 'pull_request'
        run: ./gradlew detekt

      - name: Setup Ruby
        if: github.event_name  == 'pull_request'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.6.3'
          bundler-cache: true

      - name: Run Danger
        if: github.event_name  == 'pull_request'
        run: |
          gem install danger
          bundle exec danger --dangerfile=Dangerfile --danger_id=danger-pr
        env:
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Secrets
        if: github.event_name  == 'workflow_dispatch'
        run: |
          echo "::add-mask::$INPUT_PASS_PHRASE"

          BINTRAY_API_KEY=$(echo "${{ secrets.BINTRAY_API_KEY }}" | gpg -d --passphrase "${INPUT_PASS_PHRASE}" --batch)
          echo "::add-mask::$BINTRAY_API_KEY"
          echo "BINTRAY_API_KEY=$BINTRAY_API_KEY" >> $GITHUB_ENV

          BINTRAY_GPG_PASS=$(echo "${{ secrets.BINTRAY_GPG_PASS }}" | gpg -d --passphrase "${INPUT_PASS_PHRASE}" --batch)
          echo "::add-mask::$BINTRAY_GPG_PASS"
          echo "BINTRAY_GPG_PASS=$BINTRAY_GPG_PASS" >> $GITHUB_ENV

          NEXUS_PASSWORD=$(echo "${{ secrets.NEXUS_PASSWORD }}" | gpg -d --passphrase "${INPUT_PASS_PHRASE}" --batch)
          echo "::add-mask::$NEXUS_PASSWORD"
          echo "NEXUS_PASSWORD=$NEXUS_PASSWORD" >> $GITHUB_ENV
        env:
          INPUT_PASS_PHRASE: ${{github.event.inputs.passphrase }}
          INPUT_VERSION: ${{ github.event.inputs.version }}

      - name: Prepare Keystore and Local.
        if: github.event_name  == 'workflow_dispatch'
        run: |
          echo "::add-mask::$INPUT_PASS_PHRASE"
          echo "${{ secrets.KEYSTORE }}" > opensource.jks.asc
          gpg -d --passphrase "$INPUT_PASS_PHRASE" --batch "opensource.jks.asc" > "app/opensource.jks"
          echo "${{ secrets.SIGNING_GRADLE }}" > signing.gradle.asc
          gpg -d --passphrase "$INPUT_PASS_PHRASE" --batch "signing.gradle.asc" > "app/signing.gradle"
          echo "openSource.signing.file=signing.gradle" >> local.properties
        env:
          INPUT_PASS_PHRASE: ${{github.event.inputs.passphrase }}

      - name: Build Release App
        if: startsWith(github.ref, 'refs/tags/')
        run: ./gradlew app:assembleStaging app:assembleRelease app:bundleRelease

      - name: Relase bintray
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          ./gradlew build -x test -x lint
          ./gradlew library-core:bintrayUpload -x test -x lint -Plibrary_core_only --no-configure-on-demand --no-parallel
          ./gradlew library-extensions-binding:bintrayUpload -x test -x lint -Plibrary_extensions_binding_only --no-configure-on-demand --no-parallel
          ./gradlew library-extensions-diff:bintrayUpload -x test -x lint -Plibrary_extensions_diff_only --no-configure-on-demand --no-parallel
          ./gradlew library-extensions-drag:bintrayUpload -x test -x lint -Plibrary_extensions_drag_only --no-configure-on-demand --no-parallel
          ./gradlew library-extensions-expandable:bintrayUpload -x test -x lint -Plibrary_extensions_expandable_only --no-configure-on-demand --no-parallel
          ./gradlew library-extensions-paged:bintrayUpload -x test -x lint -Plibrary_extensions_paged_only --no-configure-on-demand --no-parallel
          ./gradlew library-extensions-scroll:bintrayUpload -x test -x lint -Plibrary_extensions_scroll_only --no-configure-on-demand --no-parallel
          ./gradlew library-extensions-swipe:bintrayUpload -x test -x lint -Plibrary_extensions_swipe_only --no-configure-on-demand --no-parallel
          ./gradlew library-extensions-ui:bintrayUpload -x test -x lint -Plibrary_extensions_ui_only --no-configure-on-demand --no-parallel
          ./gradlew library-extensions-utils:bintrayUpload -x test -x lint -Plibrary_extensions_utils_only --no-configure-on-demand --no-parallel
        env:
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}

      - name: Collect artifacts
        run: |
          COLLECT_PWD=${PWD}
          mkdir -p "artifacts"
          find . -name "*.apk" -type f -exec cp {} "artifacts" \;
          find . -name "*.aab" -type f -exec cp {} "artifacts" \;

      - name: Archive Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "App-Artifacts"
          path: artifacts/*

      - name: Release
        uses: softprops/action-gh-release@91409e712cf565ce9eff10c87a8d1b11b81757ae
        if: startsWith(github.ref, 'refs/tags/')
        with:
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-b') || contains(github.ref, '-a') }}
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}